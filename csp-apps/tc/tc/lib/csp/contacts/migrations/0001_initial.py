# -*- coding: utf-8 -*-
# Generated by Django 1.11.9 on 2018-02-02 10:41
from __future__ import unicode_literals

import csp.contacts.models
import datetime
import django.contrib.postgres.fields
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('central', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='LocalTrustCircle',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('short_name', models.CharField(help_text='Needs to start with "LTC::"', max_length=128, unique=True, validators=[csp.contacts.models.ltc_prefix_validator], verbose_name='(Short) LTC Name')),
                ('tlp', models.CharField(blank=True, choices=[('red', 'Red'), ('amber', 'Amber'), ('green', 'Green'), ('white', 'White')], max_length=255)),
                ('auth_source', models.CharField(blank=True, max_length=255, verbose_name='Authoritative Source')),
                ('name', models.CharField(max_length=255, verbose_name='(Long) LTC Name')),
                ('description', models.CharField(max_length=255)),
                ('info_url', models.URLField(blank=True, verbose_name='URL for Public Information')),
                ('membership_url', models.URLField(blank=True, verbose_name='URL for Membership Directory')),
                ('created', models.DateTimeField(default=django.utils.timezone.now)),
            ],
        ),
        migrations.CreateModel(
            name='OutbandAlertingAccess',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.CharField(blank=True, max_length=255)),
                ('access_pin', models.CharField(blank=True, max_length=255)),
                ('permissions', django.contrib.postgres.fields.ArrayField(base_field=models.TextField(), blank=True, default=list, size=None)),
            ],
            options={
                'verbose_name': 'Outband Alerting Access',
                'verbose_name_plural': 'Outband Alerting Accesses',
            },
        ),
        migrations.CreateModel(
            name='OutbandAlertingContact',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.CharField(blank=True, max_length=255)),
                ('phone_number', models.CharField(blank=True, max_length=255)),
                ('number_type', models.CharField(blank=True, max_length=255)),
                ('calling_time_begin', models.CharField(blank=True, max_length=255)),
                ('calling_time_end', models.CharField(blank=True, max_length=255)),
                ('timezone', models.CharField(blank=True, default='UTC', max_length=255)),
                ('coverage', models.CharField(blank=True, max_length=255)),
            ],
            options={
                'verbose_name': 'Outband Alerting Contact',
                'verbose_name_plural': 'Outband Alerting Contacts',
            },
        ),
        migrations.CreateModel(
            name='PersonContact',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('full_name', models.TextField(blank=True, verbose_name='Full Name')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='Email')),
                ('email_visibility', models.TextField(default='private', verbose_name='Email Visibility')),
                ('postal_address', models.TextField(blank=True, verbose_name='Postal Address')),
                ('postal_country', models.TextField(blank=True, verbose_name='Postal Country')),
                ('ml_email', models.TextField(blank=True, verbose_name='Mailinglist Email')),
                ('ml_key', models.TextField(blank=True, verbose_name='Mailinglist Email PGP Key')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='PersonKeyOrCertificate',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tag', models.CharField(choices=[('main', 'Main'), ('additional', 'Additional')], default='main', max_length=20)),
                ('method', models.CharField(choices=[('x509', 'X.509 Certificate'), ('pgp', 'PGP Key')], default='x509', max_length=20)),
                ('keyid', models.CharField(blank=True, max_length=255)),
                ('visibility', models.CharField(choices=[('public', 'Public'), ('restricted', 'Restricted'), ('private', 'Private')], default='private', max_length=20)),
                ('data', models.TextField(blank=True)),
                ('personcontact', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='certificates', to='contacts.PersonContact')),
            ],
            options={
                'abstract': False,
                'verbose_name': 'PGP Key / X.509 Certificate',
                'verbose_name_plural': 'PGP Keys / X.509 Certificates',
            },
        ),
        migrations.CreateModel(
            name='PersonMembership',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('organisation', models.CharField(blank=True, max_length=255)),
                ('membership_state', models.CharField(blank=True, max_length=255)),
                ('since', models.CharField(blank=True, max_length=255)),
                ('personcontact', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='memberships', to='contacts.PersonContact')),
            ],
            options={
                'abstract': False,
                'verbose_name': 'Memberships',
            },
        ),
        migrations.CreateModel(
            name='PersonPhoneNumber',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tag', models.CharField(choices=[('main', 'Main'), ('emergency', 'Emergency'), ('fax', 'Fax')], default='main', max_length=20)),
                ('number', models.CharField(blank=True, max_length=255)),
                ('timezone', models.CharField(blank=True, default='UTC', max_length=255)),
                ('number_details', models.CharField(blank=True, max_length=255)),
                ('visibility', models.CharField(choices=[('public', 'Public'), ('restricted', 'Restricted'), ('private', 'Private')], default='private', max_length=20)),
                ('personcontact', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='phone_numbers', to='contacts.PersonContact')),
            ],
            options={
                'abstract': False,
                'verbose_name': 'Phone Number',
                'verbose_name_plural': 'Phone Numbers',
            },
        ),
        migrations.CreateModel(
            name='TeamContact',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('csp_id', models.CharField(blank=True, max_length=255, verbose_name='CSP ID')),
                ('csp_domain', models.CharField(blank=True, max_length=255, verbose_name='CSP Domain')),
                ('csp_installed', models.BooleanField(default=False, verbose_name='CSP Installed')),
                ('nis_team_types', django.contrib.postgres.fields.ArrayField(base_field=models.TextField(), blank=True, default=list, size=None)),
                ('nis_sectors', django.contrib.postgres.fields.ArrayField(base_field=models.TextField(), blank=True, default=list, size=None)),
                ('status', models.CharField(max_length=255)),
                ('short_name', models.CharField(max_length=128, verbose_name='Short Name')),
                ('name', models.CharField(max_length=255, verbose_name='Official Name')),
                ('host_organisation', models.CharField(max_length=255, verbose_name='Host Organisation')),
                ('country', models.CharField(max_length=255)),
                ('additional_countries', django.contrib.postgres.fields.ArrayField(base_field=models.TextField(), blank=True, default=list, size=None, verbose_name='Additional Countries')),
                ('established_on', models.DateField(default=datetime.date.today, verbose_name='Established on')),
                ('constituency_types', django.contrib.postgres.fields.ArrayField(base_field=models.TextField(), blank=True, default=list, size=None)),
                ('constituency_description', models.TextField(blank=True)),
                ('member_locations', django.contrib.postgres.fields.ArrayField(base_field=models.TextField(), blank=True, default=list, size=None)),
                ('constituency_asns', django.contrib.postgres.fields.ArrayField(base_field=models.TextField(), blank=True, size=None)),
                ('constituency_domains', django.contrib.postgres.fields.ArrayField(base_field=models.TextField(), blank=True, size=None)),
                ('constituency_ipranges', django.contrib.postgres.fields.ArrayField(base_field=models.TextField(), blank=True, size=None)),
                ('scope_asns', django.contrib.postgres.fields.ArrayField(base_field=models.TextField(), blank=True, size=None)),
                ('scope_ipranges', django.contrib.postgres.fields.ArrayField(base_field=models.TextField(), blank=True, size=None)),
                ('scope_email', django.contrib.postgres.fields.ArrayField(base_field=models.TextField(), blank=True, size=None)),
                ('contact_postal_address', models.TextField(blank=True)),
                ('contact_postal_country', models.TextField(blank=True)),
                ('main_email', models.EmailField(blank=True, max_length=254)),
                ('public_email', models.EmailField(blank=True, max_length=254)),
                ('automated_email', models.EmailField(blank=True, max_length=254)),
                ('automated_email_format', django.contrib.postgres.fields.ArrayField(base_field=models.TextField(), blank=True, default=list, size=None)),
                ('public_www', models.TextField(blank=True)),
                ('public_ftp', models.TextField(blank=True)),
                ('public_mailinglist', models.TextField(blank=True)),
                ('public_usenet', models.TextField(blank=True)),
                ('business_hours', models.TextField(blank=True)),
                ('outside_business_hours', models.TextField(blank=True)),
                ('business_hours_timezone', models.TextField(blank=True, default='UTC')),
                ('billing_postal_address', models.TextField(blank=True)),
                ('billing_postal_country', models.TextField(blank=True)),
                ('vat_number', models.TextField(blank=True)),
                ('classification_policy', models.TextField(blank=True)),
                ('exclusivity_policy', models.TextField(blank=True)),
                ('disclosure_policy', models.TextField(blank=True)),
                ('legal_considerations', models.TextField(blank=True)),
                ('cryptography_policy', models.TextField(blank=True)),
                ('url_rfc2350', models.CharField(blank=True, max_length=255)),
                ('reactive_services', django.contrib.postgres.fields.ArrayField(base_field=models.TextField(), blank=True, default=list, size=None)),
                ('reactive_services_comment', models.TextField(blank=True)),
                ('proactive_services', django.contrib.postgres.fields.ArrayField(base_field=models.TextField(), blank=True, default=list, size=None)),
                ('proactive_services_comment', models.TextField(blank=True)),
                ('quality_management', django.contrib.postgres.fields.ArrayField(base_field=models.TextField(), blank=True, default=list, size=None)),
                ('quality_management_comment', models.TextField(blank=True)),
                ('process_tool', models.TextField(blank=True)),
                ('related_software', models.TextField(blank=True)),
                ('generic', models.TextField(blank=True)),
                ('os', models.TextField(blank=True)),
                ('platform', models.TextField(blank=True)),
                ('network', models.TextField(blank=True)),
                ('other', models.TextField(blank=True)),
                ('references', models.TextField(blank=True)),
                ('accreditations', models.TextField(blank=True)),
                ('projects', models.TextField(blank=True)),
                ('reporting_structure', models.TextField(blank=True)),
                ('education', models.TextField(blank=True)),
                ('headcount_normal', models.TextField(blank=True)),
                ('headcount_backup', models.TextField(blank=True)),
                ('fte_normal', models.TextField(blank=True)),
                ('fte_backup', models.TextField(blank=True)),
                ('provide_team_description', models.CharField(choices=[('null', '-'), ('supported', 'Supported'), ('unsupported', 'Not Supported')], default='null', max_length=20, verbose_name='Provide team description (MUST)')),
                ('provide_team_description_comment', models.TextField(blank=True)),
                ('access_of_accredited_teams', models.CharField(choices=[('null', '-'), ('supported', 'Supported'), ('unsupported', 'Not Supported')], default='null', max_length=20, verbose_name="Access of accredited teams to your team's data (MUST)")),
                ('access_of_accredited_teams_comment', models.TextField(blank=True)),
                ('public_access', models.CharField(choices=[('null', '-'), ('supported', 'Supported'), ('unsupported', 'Not Supported')], default='null', max_length=20, verbose_name="Public access to your team's data marked as public (MUST)")),
                ('public_access_comment', models.TextField(blank=True)),
                ('external_services_rfc2350', models.CharField(choices=[('null', '-'), ('supported', 'Supported'), ('unsupported', 'Not Supported')], default='null', max_length=20, verbose_name='External services described in RFC 2350 format (MUST)')),
                ('external_services_rfc2350_comment', models.TextField(blank=True)),
                ('adhere_to_tlp', models.CharField(choices=[('null', '-'), ('supported', 'Supported'), ('unsupported', 'Not Supported')], default='null', max_length=20, verbose_name='Adhere to the Information Sharing Traffic Light Protocol (MUST)')),
                ('adhere_to_tlp_comment', models.TextField(blank=True)),
                ('allow_ti_gpg_key', models.CharField(choices=[('null', '-'), ('supported', 'Supported'), ('unsupported', 'Not Supported')], default='null', max_length=20, verbose_name='Allow GPG/PGP key signatures by the TI service team (MUST)')),
                ('allow_ti_gpg_key_comment', models.TextField(blank=True)),
                ('commitment_updates', models.CharField(choices=[('null', '-'), ('supported', 'Supported'), ('unsupported', 'Not Supported')], default='null', max_length=20, verbose_name='Commitment to provide regular updates for team data (MUST)')),
                ('commitment_updates_comment', models.TextField(blank=True)),
                ('protect_information_received', models.CharField(choices=[('null', '-'), ('supported', 'Supported'), ('unsupported', 'Not Supported')], default='null', max_length=20, verbose_name='Protect information received by your team (MUST)')),
                ('protect_information_received_comment', models.TextField(blank=True)),
                ('provide_feedback', models.CharField(choices=[('null', '-'), ('supported', 'Supported'), ('unsupported', 'Not Supported')], default='null', max_length=20, verbose_name='Provide feedback to questions of the TI service (MUST)')),
                ('provide_feedback_comment', models.TextField(blank=True)),
                ('allow_site_visits', models.CharField(choices=[('null', '-'), ('supported', 'Supported'), ('unsupported', 'Not Supported')], default='null', max_length=20, verbose_name='Allow site visits of the TI service team (MUST)')),
                ('allow_site_visits_comment', models.TextField(blank=True)),
                ('payment_of_fees', models.CharField(choices=[('null', '-'), ('supported', 'Supported'), ('unsupported', 'Not Supported')], default='null', max_length=20, verbose_name='Payment of fees for the TI service (MUST)')),
                ('payment_of_fees_comment', models.TextField(blank=True)),
                ('registration_two_teams', models.CharField(choices=[('null', '-'), ('supported', 'Supported'), ('unsupported', 'Not Supported')], default='null', max_length=20, verbose_name='Registration of two team representative (SHOULD)')),
                ('registration_two_teams_comment', models.TextField(blank=True)),
                ('sim3_support', models.CharField(choices=[('null', '-'), ('supported', 'Supported'), ('unsupported', 'Not Supported')], default='null', max_length=20, verbose_name='Acceptance of SIM3 Model as framework for self-assessment (SHOULD)')),
                ('sim3_support_comment', models.TextField(blank=True)),
                ('meetings_attendance', models.CharField(choices=[('null', '-'), ('supported', 'Supported'), ('unsupported', 'Not Supported')], default='null', max_length=20, verbose_name='Regular attendance a TF-CSIRT/TI Meetings (SHOULD)')),
                ('meetings_attendance_comment', models.TextField(blank=True)),
                ('csirt_code_of_practice', models.CharField(choices=[('null', '-'), ('supported', 'Supported'), ('unsupported', 'Not Supported')], default='null', max_length=20, verbose_name='Compliance with the "CSIRT Code of Practive" (SHOULD)')),
                ('csirt_code_of_practice_comment', models.TextField(blank=True)),
                ('reaction_texts_particiation', models.CharField(choices=[('null', '-'), ('supported', 'Supported'), ('unsupported', 'Not Supported')], default='null', max_length=20, verbose_name='Participation in "Reaction Tests" (SHOULD)')),
                ('reaction_texts_particiation_comment', models.TextField(blank=True)),
                ('managed_by_ti', models.BooleanField(default=False)),
                ('irt_encryption_keys', django.contrib.postgres.fields.ArrayField(base_field=models.TextField(), blank=True, default=list, size=None)),
                ('irt_signature_keys', django.contrib.postgres.fields.ArrayField(base_field=models.TextField(), blank=True, default=list, size=None)),
                ('irt_authentication_keys', django.contrib.postgres.fields.ArrayField(base_field=models.TextField(), blank=True, default=list, size=None)),
                ('irt_emails', django.contrib.postgres.fields.ArrayField(base_field=models.TextField(), blank=True, default=list, size=None)),
                ('irt_abuse_emails', django.contrib.postgres.fields.ArrayField(base_field=models.TextField(), blank=True, default=list, size=None)),
                ('irt_notify_emails', django.contrib.postgres.fields.ArrayField(base_field=models.TextField(), blank=True, default=list, size=None)),
                ('irt_phone_numbers', django.contrib.postgres.fields.ArrayField(base_field=models.TextField(), blank=True, default=list, size=None, validators=[csp.contacts.models.validate_phone_list])),
                ('irt_fax_numbers', django.contrib.postgres.fields.ArrayField(base_field=models.TextField(), blank=True, default=list, size=None, validators=[csp.contacts.models.validate_phone_list])),
                ('irt_emergency_numbers', django.contrib.postgres.fields.ArrayField(base_field=models.TextField(), blank=True, default=list, size=None, validators=[csp.contacts.models.validate_phone_list])),
                ('irt_rfc2350', models.TextField(blank=True)),
                ('irt_address', models.TextField(blank=True)),
                ('irt_additional_remarks', models.TextField(blank=True)),
                ('outband_alerting_id', models.CharField(blank=True, max_length=255)),
            ],
        ),
        migrations.CreateModel(
            name='TeamKeyOrCertificate',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tag', models.CharField(choices=[('main', 'Main'), ('additional', 'Additional')], default='main', max_length=20)),
                ('method', models.CharField(choices=[('x509', 'X.509 Certificate'), ('pgp', 'PGP Key')], default='x509', max_length=20)),
                ('keyid', models.CharField(blank=True, max_length=255)),
                ('visibility', models.CharField(choices=[('public', 'Public'), ('restricted', 'Restricted'), ('private', 'Private')], default='private', max_length=20)),
                ('data', models.TextField(blank=True)),
                ('teamcontact', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='certificates', to='contacts.TeamContact')),
            ],
            options={
                'abstract': False,
                'verbose_name': 'PGP Key / X.509 Certificate',
                'verbose_name_plural': 'PGP Keys / X.509 Certificates',
            },
        ),
        migrations.CreateModel(
            name='TeamMember',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('full_name', models.TextField(blank=True, verbose_name='Full Name')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='Email')),
                ('email_visibility', models.TextField(default='private', verbose_name='Email Visibility')),
                ('postal_address', models.TextField(blank=True, verbose_name='Postal Address')),
                ('postal_country', models.TextField(blank=True, verbose_name='Postal Country')),
                ('ml_email', models.TextField(blank=True, verbose_name='Mailinglist Email')),
                ('ml_key', models.TextField(blank=True, verbose_name='Mailinglist Email PGP Key')),
                ('team_role', models.TextField(blank=True, default='Team Member', null=True)),
                ('host_rep', models.BooleanField(default=False)),
                ('constituency_rep', models.BooleanField(default=False)),
                ('team', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='team_members', to='contacts.TeamContact')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='TeamMemberKeyOrCertificate',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tag', models.CharField(choices=[('main', 'Main'), ('additional', 'Additional')], default='main', max_length=20)),
                ('method', models.CharField(choices=[('x509', 'X.509 Certificate'), ('pgp', 'PGP Key')], default='x509', max_length=20)),
                ('keyid', models.CharField(blank=True, max_length=255)),
                ('visibility', models.CharField(choices=[('public', 'Public'), ('restricted', 'Restricted'), ('private', 'Private')], default='private', max_length=20)),
                ('data', models.TextField(blank=True)),
                ('teammember', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='certificates', to='contacts.TeamMember')),
            ],
            options={
                'abstract': False,
                'verbose_name': 'PGP Key / X.509 Certificate',
                'verbose_name_plural': 'PGP Keys / X.509 Certificates',
            },
        ),
        migrations.CreateModel(
            name='TeamMemberMembership',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('organisation', models.CharField(blank=True, max_length=255)),
                ('membership_state', models.CharField(blank=True, max_length=255)),
                ('since', models.CharField(blank=True, max_length=255)),
                ('teammember', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='memberships', to='contacts.TeamMember')),
            ],
            options={
                'abstract': False,
                'verbose_name': 'Memberships',
            },
        ),
        migrations.CreateModel(
            name='TeamMemberPhoneNumber',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tag', models.CharField(choices=[('main', 'Main'), ('emergency', 'Emergency'), ('fax', 'Fax')], default='main', max_length=20)),
                ('number', models.CharField(blank=True, max_length=255)),
                ('timezone', models.CharField(blank=True, default='UTC', max_length=255)),
                ('number_details', models.CharField(blank=True, max_length=255)),
                ('visibility', models.CharField(choices=[('public', 'Public'), ('restricted', 'Restricted'), ('private', 'Private')], default='private', max_length=20)),
                ('teammember', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='phone_numbers', to='contacts.TeamMember')),
            ],
            options={
                'abstract': False,
                'verbose_name': 'Phone Number',
                'verbose_name_plural': 'Phone Numbers',
            },
        ),
        migrations.CreateModel(
            name='TeamMembership',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('organisation', models.CharField(blank=True, max_length=255)),
                ('membership_state', models.CharField(blank=True, max_length=255)),
                ('since', models.CharField(blank=True, max_length=255)),
                ('teamcontact', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='memberships', to='contacts.TeamContact')),
            ],
            options={
                'abstract': False,
                'verbose_name': 'Memberships',
            },
        ),
        migrations.CreateModel(
            name='TeamPhoneNumber',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tag', models.CharField(choices=[('main', 'Main'), ('emergency', 'Emergency'), ('fax', 'Fax')], default='main', max_length=20)),
                ('number', models.CharField(blank=True, max_length=255)),
                ('timezone', models.CharField(blank=True, default='UTC', max_length=255)),
                ('number_details', models.CharField(blank=True, max_length=255)),
                ('visibility', models.CharField(choices=[('public', 'Public'), ('restricted', 'Restricted'), ('private', 'Private')], default='private', max_length=20)),
                ('teamcontact', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='phone_numbers', to='contacts.TeamContact')),
            ],
            options={
                'abstract': False,
                'verbose_name': 'Phone Number',
                'verbose_name_plural': 'Phone Numbers',
            },
        ),
        migrations.AlterUniqueTogether(
            name='teamcontact',
            unique_together=set([('short_name', 'country')]),
        ),
        migrations.AddField(
            model_name='outbandalertingcontact',
            name='teamcontact',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='outband_alerting_contacts', to='contacts.TeamContact'),
        ),
        migrations.AddField(
            model_name='outbandalertingaccess',
            name='teamcontact',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='outband_alerting_accesses', to='contacts.TeamContact'),
        ),
        migrations.AddField(
            model_name='localtrustcircle',
            name='person_contacts',
            field=models.ManyToManyField(blank=True, related_name='in_localcircles', to='contacts.PersonContact', verbose_name='Person Contacts'),
        ),
        migrations.AddField(
            model_name='localtrustcircle',
            name='team_contacts',
            field=models.ManyToManyField(blank=True, related_name='in_localcircles', to='contacts.TeamContact', verbose_name='Team Contacts'),
        ),
        migrations.AddField(
            model_name='localtrustcircle',
            name='trustcircles',
            field=models.ManyToManyField(blank=True, related_name='in_localcircles', to='central.TrustCircle', verbose_name='Central Trust Circles'),
        ),
    ]
