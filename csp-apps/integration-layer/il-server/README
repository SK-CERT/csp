----------------------------------------------------------------------
- ENABLE SSL MUTUAL AUTHENTICATION USING AN INTERNAL CSP CERTIFICATE -
----------------------------------------------------------------------


##############################################################
# Create the CA Key and Certificate for signing Client Certs #
##############################################################

# default password to use for demo purposes: 123456

openssl genrsa -des3 -out ca.key 4096
openssl req -new -x509 -days 365 -key ca.key -out ca.crt

# IMPORTANT!: When asked to provide: 'Common Name (e.g. server FQDN or YOUR name) []:' use something unique eg. csp-ca-auth

###############################################
# Create the Server Key, CSR, and Certificate #
###############################################

# default password to use for demo purposes: 123456

openssl genrsa -des3 -out csp-internal.key 1024
openssl genrsa -out csp-internal.key 1024 -- No passphrase
openssl req -new -key csp-internal.key -out csp-internal.csr

# IMPORTANT!: When asked to provide: 'Common Name (e.g. server FQDN or YOUR name) []:' use something unique eg. csp-internal-auth
# When asked 'Please enter the following 'extra' attributes to be sent with your certificate request', leave them empty

##########################################################################
# Self signing our own server cert here.  This is a no-no in production. #
##########################################################################

openssl x509 -req -days 365 -in csp-internal.csr -CA ca.crt -CAkey ca.key -set_serial 01 -out csp-internal.crt

###################################
# Verify CSP internal Certificate #
###################################

openssl verify -purpose sslserver -CAfile ca.crt csp-internal.crt

####################################
# Convert CSP internal Key to PKCS #
####################################

# default password to use for demo purposes: 123456
# if you don not provide a password (leave it empty), the creation of the jks file later will fail

openssl pkcs12 -export -clcerts -in csp-internal.crt -inkey csp-internal.key -out csp-internal.p12

############################################
# Import CA certificate in Java Truststore #
############################################

sudo $JAVA_HOME/bin/keytool -importcert -file ca.crt -alias CspCaAuth -keystore $JAVA_HOME/jre/lib/security/cacerts -storepass changeit

#################################
# Convert to JKS for java usage #
#################################

# default password to use for demo purposes: 123456

keytool -importkeystore -srckeystore csp-internal.p12 -srcstoretype pkcs12 -destkeystore csp-internal.jks -deststoretype JKS

#####################
# Testing with curl #
#####################

# ON LINUX
# TC url example

curl -v -s -k --key csp-internal.key --cert csp-internal.crt https://localhost:8081/tc/1

# ON OSX

curl -v -k -E client.p12:1234 https://localhost:8443







##########
# Ignore #
##########

# Various Notes:

openssl pkcs12 -export -in client.crt -inkey client.key -certfile client.crt -out client.p12

keytool -importkeystore -srckeystore client.p12 -srcstoretype pkcs12 -destkeystore client.jks -deststoretype JKS

sudo /usr/local/java/jdk1.8.0_131/bin/keytool -importcert -file /data/common/sslcert2/ca.crt -alias CSPcert -keystore /usr/local/java/jdk1.8.0_131/jre/lib/security/cacerts -storepass changeit

DO NOT add the following to TS. It will cause CONFLICTS!!
sudo /usr/local/java/jdk1.8.0_131/bin/keytool -importcert -file /data/common/sslcert2/server.crt -alias CSPinserver -keystore /usr/local/java/jdk1.8.0_131/jre/lib/security/cacerts -storepass changeit
sudo /usr/local/java/jdk1.8.0_131/bin/keytool -importcert -file /data/common/sslcert2/client.crt -alias CSPinclient -keystore /usr/local/java/jdk1.8.0_131/jre/lib/security/cacerts -storepass changeit

TEST
curl -v -s -k --key client.key --cert client.crt https://localhost:8081/tc/212


Creation of env file

go to deployments project

go to configuraiton templates

scripts / configuration templates

env.demo1-csp.json

When adding a new service, go to services dictionary



Go to demo1-csp

at ~/deployments/scripts/configuration-templates

git pull to get the latest

Create a template:

 $ git pull
 $ j2 templates/.env.j2 env.demo1-csp.json
