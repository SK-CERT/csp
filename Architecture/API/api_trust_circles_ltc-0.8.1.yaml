swagger: "2.0"
info:
  description: "This is a fake LTC api. It resembles the existing CTC API and is subject to change. However the general structure is expected to be very similar to the final one."
  version: "0.8.1"
  title: "Swagger fake LTC management"
  termsOfService: "none"
  contact:
    email: "me@noone.com"
  license:
    name: "Melicertes internal"
host: "localhost"
basePath: "/v1"
tags:
- name: "ltc"
  description: "Everything about Local Trust Circles (LTCs)"
  externalDocs:
    description: "Trust is an interesting thing"
    url: "gopher://not.me"
- name: "contacts"
  description: "Everything you want to know about contacts"
schemes:
- "http"
paths:
  /ltc:
    get:
      tags:
      - "ltc"
      summary: "Gets LTCs by name"
      description: "will return LTCs. LTCs will include references about contacts as well as references about teams (see below)"
      operationId: "findLTCsByStatus"
      produces:
      - "application/json"
      parameters:
      - name: "short_name"
        in: "query"
        description: "short name of LTC"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/LTC"
        400:
          description: "NO LTC found by that name"
  /ltc/{ltcId}:
    get:
      tags:
      - "ltc"
      summary: "Gets LTCs by ID"
      description: "Returns a single LTC"
      operationId: "getLTCById"
      produces:
      - "application/json"
      parameters:
      - name: "ltcId"
        in: "path"
        description: "ID of LTC to return"
        required: true
        type: "string"
        format: "uuid"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/LTC"
        400:
          description: "Invalid UUID supplied"
        404:
          description: "LTC not found"

  /contacts:
    get:
      tags:
      - "contacts"
      summary: "Gets Contacts by querying for attributes"
      description: "Multiple attributes values can be provided with comma separated strings, some examples provided"
      operationId: "searchContactsByAttributes"
      produces:
      - "application/json"
      parameters:
      - name: "country"
        in: "query"
        description: "country of the contact"
        type: "string"
      - name: "short_name"
        in: "query"
        description: "contact shortname"
        type: "string"
      - name: "email"
        in: "query"
        description: "main email address"
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              allOf:  #should be oneOf, but swagger can't mimic this yet --> see proposal #741
              - $ref: "#/definitions/team_contact"
              - $ref: "#/definitions/person_contact"

        400:
          description: "Invalid status value"

  /contacts/{contactId}:
    get:
      tags:
      - "contacts"
      summary: "Find contacts by ID"
      description: "Returns a single contact"
      operationId: "getContactById"
      produces:
      - "application/json"
      parameters:
      - name: "contactId"
        in: "path"
        description: "ID of contact to return"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            allOf: #should be oneOf, but swagger can't mimic this yet --> see proposal #741
              - $ref: "#/definitions/team_contact"
              - $ref: "#/definitions/person_contact"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Contact not found"
          
          
definitions:

  LTC:
    type: "object"
    properties:
      id:
        type: "string"
        format: "uuid"
      short_name:
        type: "string"
      name:
        type: "string"
      description:
        type: "string"
      auth_source:
        type: "string"
      info_url:
        type: "string"
      membership_url:
        type: "string"
      created:
        type: "string"
      tlp:
        type: "string"
        enum:
         - "red"
         - "amber"
         - "green"
         - "white"
      teams:
        type: array
        items:
          type: "string"
          description: "list of CTC::teams"
      team_contacts:
        type: array
        items:
          type: "string"
        description: "list of team_contacts"
      person_contacts:
        type: array
        items:
          type: "string"
        description: "list of person_contacts, will only include direct members, not inheriting automatically from team_contacts"

  team_contact:
    type: "object"
    properties:
      id:
        type: "string"
        format: "uuid"
      csp_id:
        type: "string"
      csp_domain:
       type: "string"
      csp_installed:
       type: "boolean"
 
      nis_team_ types:
        type: array
        items:
          type: "string"
      nis_sectors:
        type: array
        items:
          type: "string"
      status:
        type: "string"
      
      short_name:
       type: "string"
       description: "pkey together with country"
      name:
       type: "string"
      host_organisation:
       type: "string"
      country:
       type: "string"
       description: "pkey together with short_name"
       
      additional_countries:
        type: array
        items:
          type: "string"
      
      established_on:
       type: "string"
      
      constituency_types:
        type: array
        items:
          type: "string"
      constituency_description:
       type: "string"
      member_locations:
        type: array
        items:
          type: "string"
      
      constituency_asns:
        type: array
        items:
          type: "string"
      constituency_domains:
        type: array
        items:
          type: "string"
      constituency_ipranges:
        type: array
        items:
          type: "string"
      
      scope_asns:
        type: array
        items:
          type: "string"
      scope_ipranges:
        type: array
        items:
          type: "string"
      scope_email:
        type: array
        items:
          type: "string"
          format: "email"
      
      contact_postal_address:
       type: "string"
      contact_postal_country:
       type: "string"
      
      phone_numbers:
       type: "string"
       description: "Will be a list of dicts (tag, number, timezone, number_details, (maybe)visibility)"
      
      
      main_email:
       type: "string"
       format: "email"
      public_email:
       type: "string"
       format: "email"
      automated_email:
       type: "string"
       format: "email"
      
      automated_email_format:
        type: array
        items:
          type: "string"
          description: "defines supported data exchange formats"
      
      public_www:
       type: "string"
      public_ftp:
       type: "string"
      public_mailinglist:
       type: "string"
      public_usenet:
       type: "string"
      
      business_hours:
       type: "string"
      outside_business_hours:
       type: "string"
      business_hours_timezone:
       type: "string"
       
      team_members:
       type: "string"
       description: "Will be a list of dicts (person_contact->id, role)"
      
  person_contact:
    type: "object"
    properties:
      id:
        type: "string"
        format: "uuid"
      csp_id:
        type: "string"
      csp_domain:
       type: "string"
      csp_installed:
       type: "boolean"
      nis_team_types:
        type: array
        items:
          type: "string"
      nis_sectors:
        type: array
        items:
          type: "string"
 
      
      full_name:
       type: "string"
      email:
       type: "string"
       format: "email"
       description: "will act as pkey"
      email_visibility: # maybe
       type: "boolean"
      postal_address:
       type: "string"
      postal_country:
       type: "string"
       
      ml_email:
       type: "string"
       format: "email"
      ml_key:
       type: "string"
       
      phone_numbers:
       type: "string"
       description: "Will be a list of dicts (tag, number, timezone, number_details, (maybe)visibility)"
      
      certificates:
       type: "string"
       description: "Will be a list of dicts (tag, method, keyid, (maybe)visibility, data)"
      
      memberships:
       type: "string"
       description: "Will be a list of dicts (organisation, membership_state, since)"

