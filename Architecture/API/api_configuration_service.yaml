swagger: '2.0'
info:
  version: 1.0.2
  title: CSP Server Configuration API
schemes:
  - https

# basePath does not contain the version so we can support multiple in the future
basePath: /csp/confservice

# paths may include a 'vXYZ' path if they are versioned
paths:
  '/v1/updates/{cspId}':
    get:
      description: |
        Retrieves a list of available updates, for registered modules of the
        CSP. See the "register" API call on how to register modules
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: cspId
          in: path
          description: | 
            a unique identifier that defines a Registered and Known CSP. The 
            csp identifier follows the UUID formatted as text, for 36 characters
            total, arranged as 8-4-4-4-12. 
            Example = 123e4567-e89b-12d3-a456-426655440000 
          required: true
          type: string
      responses:
        '200': 
          description: List of available updates by module
          schema: 
            $ref: '#/definitions/UpdateInformation'
        '404': 
          description: cspId not found; failure to identify cspId presented
          schema:
            $ref: '#/definitions/ResponseError'
        '500':
          description: Systemic failure
          schema:
            $ref: '#/definitions/ResponseError'
            
  '/v1/appInfo/{cspId}':
    post:
      description: |
        Submits a body that contains information of the CSP 
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: cspId
          in: path
          description: | 
            a unique identifier that defines a Registered and Known CSP. The 
            csp identifier follows the UUID formatted as text, for 36 characters
            total, arranged as 8-4-4-4-12. 
            Example = 123e4567-e89b-12d3-a456-426655440000 
          required: true
          type: string
        - name: heartbeatInfo
          in: body
          description: the information
          required: true
          schema:
            $ref: '#/definitions/AppInfo'
      responses:
        '200':
          description: Successful response
          schema:
            $ref: '#/definitions/Response'
        '404': 
          description: cspId not found; failure to identify cspId presented
          schema:
            $ref: '#/definitions/ResponseError'
        '500':
          description: Systemic failure
          schema:
            $ref: '#/definitions/ResponseError'

  '/v1/register/{cspId}':
    post:
      description: |
        Register a NEW csp or register for an existing CSP the modules that are being installed
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: cspId
          in: path
          description: | 
            a unique identifier that defines a Registered and Known CSP. The 
            csp identifier follows the UUID formatted as text, for 36 characters
            total, arranged as 8-4-4-4-12. 
            Example = 123e4567-e89b-12d3-a456-426655440000 
          required: true
          type: string
        - name: cspRegistration
          description: a block of information to register the CSP being installed
          in: body
          required: true
          schema:
            $ref: '#/definitions/Registration'
      responses:
        '200':
          description: received when the CSP is registered successfully
          schema:
            $ref: '#/definitions/Response'
        '404':
          description: received when CSP requests update but original entry does not exist OR 
            when cspId is not recognized
          schema:
            $ref: '#/definitions/ResponseError'
        '400':
          description: received when CSP updates entries with "registrationIsUpdate = false"
          schema:
            $ref: '#/definitions/ResponseError'
        '500': 
          description: received when the CSP is not registered due to system error
          schema:
            $ref: '#/definitions/ResponseError'

  '/v1/update/{cspId}/{updateHash}':
    get:
      description: |
        Retrieves a list of available updates, for registered modules of the
        CSP. See the "register" API call on how to register modules
      consumes:
        - application/json
      produces:
        - application/json
        - application/octet-stream
      parameters:
        - name: cspId
          in: path
          description: | 
            a unique identifier that defines a Registered and Known CSP. The 
            csp identifier follows the UUID formatted as text, for 36 characters
            total, arranged as 8-4-4-4-12. 
            Example = 123e4567-e89b-12d3-a456-426655440000 
          required: true
          type: string
        - name: updateHash
          in: path
          description: | 
            a unique identifier hash for the given update. The system must verify that this
            hash is available for this cspId to download; then it provides the byte stream
            for this update object.
          required: true
          type: string
      responses:
        '200':
          description: a byte stream for the data requested
          schema:
            type: file
            format: application/octet-stream
        '404':
          description: cspId is not recognized
          schema:
            $ref: '#/definitions/ResponseError'
        '400':
          description: received when this update is not available for this CSP
          schema:
            $ref: '#/definitions/ResponseError'
        
  


definitions:
  
  VersionDefinition:
    description: |
      the version definition used for communicating with the CSP APIs;
      it has a visual and a numeric format. The visual format can be created by 
      splitting the numeric at specific points, (0 based) 1, 2
      example: 12000 split as 1.2.000
    type: integer
    minimum: 10000
    maximum: 90000
    
  Registration:
    description: Registration object for a new CSP
    properties:
      name:
        type: string
        example: DFN-Cert CSIRT Installation
        description: CSP name as given by the CSP installation
      domainName:
        type: string
        example: dfncertmain.dfn.cert.org
      registrationDate:
        type: string
        format: date-time
        example: '2017-03-30T23:59:60Z'
        description: Date and Time in UTC ISODate for the record timestamp
      externalIPs:
        type: array
        items: 
          type: string
        minItems: 1
        maxItems: 10
      internalIPs:
        type: array
        minItems: 1
        maxItems: 10
        items: 
          type: string
      registrationIsUpdate:
        type: boolean
        description: "true if this is an update of existing CSP registration"
      contacts:
        type: array
        items:
          $ref: '#/definitions/ContactDetails'
        minItems: 2
        maxItems: 10
      moduleInfo:
        $ref: '#/definitions/ModulesInfo'
    required:
      - name
      - registrationDate   
      - externalIPs
      - internalIPs
      - registrationIsUpdate
      - contacts
      
  ContactDetails:
    properties:
      personName:
        type: string
      personEmail:
        type: string
        format: email
      contactType:
        type: string
        description: 'type of contact details'
        default: tech-admin
        enum:
        - tech-admin
        - contact
        - securityofficer
    required:
      - personName
      - personEmail
      - contactType
      
  AppInfo:
    description: AppInfo object
    properties:
      name:
        type: string
        example: DFN-Cert CSIRT Installation
        description: CSP name as given by the CSP installation
      recordDateTime:
        type: string
        format: date-time
        example: '2017-03-30T23:59:60Z'
        description: Date and Time in UTC ISODate for the record timestamp
      moduleInfo:
        $ref: '#/definitions/ModulesInfo'
    required:
      - name
      - recordDateTime
      - moduleInfo
  Response:
    description: Accepted Response object
    properties:
      responseCode:
        type: integer
        example: 0
        minimum: 0
        maximum: 999
        description: 'the response code; 0 = OK, > 0 = Error (see detailed response)'
      responseText:
        type: string
        example: Successful Submission
        description: the response received in a textual format
    required:
      - responseCode
      - responseText
  ResponseError:
    description: Failed Response object
    properties:
      responseCode:
        type: integer
        minimum: 1000
        maximum: 9999
        example: 1020
        description: the response code; code > 0 = Error (see detailed response)
      responseText:
        type: string
        example: Transaction failure
        description: the response received in a textual format
      responseException:
        type: string
        example: Exception as received from the backend
    required:
      - responseCode
      - responseText
      - responseException
      
      
  ModulesInfo:
    description: The json object that contains information on the modules installed
    properties:
      modules:
        type: array
        items: 
          type: string
          example:
            - configuration-service-client
            - misp-installation
        description: 'array of the modules names, see example'
      data:
        properties:
          name: 
            type: string
            example: 'configuration-service-client'
          additionalProperties:
            $ref: '#/definitions/ModuleData'
    required:
      - modules
      - data
      
  ModuleData:
    description: Map of data specific to a module
    properties:
      fullName:
        type: string
      version:
        $ref: "#/definitions/VersionDefinition"
      installedOn:
        type: string
        format: date
      active:
        type: boolean
      hash:
        type: string
      startPriority:
        type: number
    example:
      configuration-service-client:
        fullName: 'configuration-service-client:1.0'
        version: 10000
        installed: '2017-04-24T11:59:35Z'
        active: true
        hash: 'c0535e4be2b79ffd93291305436bf889314e4a3faec05ecffcbb7df31ad9e51a'
    required:
      - fullName
      - version
      - installedOn
      - active
      - hash
      
  UpdateInformation:
    description: contains update information for the selected CSP
    properties:
      dateChanged:
        description: shows last change for update information
        type: string
        format: date-time
      available:
        description: list of available updates by module
        type: object
        example:
          configuration-service-client:
            - name: 'configuration-service-client:1.0.1'
              description: Rolling update of 20170331 to fix CSR-3988
              version: 10129
              released: '2017-03-30T11:12:33Z'
              isIncremental: true
            - name: 'configuration-service-client:1.0.2'
              description: Rolling update of 20170403 to fix CSR-3989
              version: 10200
              released: '2017-04-03T12:12:33Z'
              isIncremental: true
        additionalProperties:
          $ref: '#/definitions/ModuleUpdateInfo'
    required:
      - dateChanged
      - available
      
  ModuleUpdateInfo:
    description: list of available updates for a module
    properties:
      name:
        type: string
      description:
        type: string
      version:
        $ref: "#/definitions/VersionDefinition"
      released:
        type: string
        format: date-time
      isIncremental:
        type: boolean
        description: >-
          Value is true if the update needs the previous update installed to
          work.
      hash:
        type: string
        description: |
          the SHA256 hash of the update archive
        example: 'c0535e4be2b79ffd93291305436bf889314e4a3faec05ecffcbb7df31ad9e51a'
    required:
      - name
      - description
      - version
      - released
      - isIncremental
      - hash
    example:
      name: 'configuration-service-client:1.0.1'
      description: 'Rolling update of 20170331 to fix CSR-3988'
      version: 10100
      released: '2017-03-30T11:12:33Z'
      isIncremental: true
      hash: 'c0535e4be2b79ffd93291305436bf889314e4a3faec05ecffcbb7df31ad9e51a'
